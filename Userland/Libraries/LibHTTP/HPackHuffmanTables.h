/*
 * Copyright (c) 2021-2023, the SerenityOS developers.
 * Copyright (c) 2021, Arne Elster <arne@elster.li>
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

#pragma once

#include <AK/Array.h>
#include <AK/BitStream.h>
#include <AK/Span.h>

namespace HTTP::HPack {

template<typename Symbol>
struct HuffmanEntry {
    using SymbolType = Symbol;
    unsigned code;
    size_t code_length;
    Symbol symbol;
};

template<typename Symbol>
struct HuffmanNode {
    int left;
    int right;
    unsigned code;
    size_t code_length;
    Symbol symbol;
    bool is_leaf() const { return left == -1 && right == -1; }
};

template<typename Symbol, size_t Size>
using HuffmanEntries = Array<Symbol, Size>;

template<typename Symbol, size_t Size>
using HuffmanNodes = Array<HuffmanNode<Symbol>, Size>;

template<typename Symbol, typename NodeArrayType>
consteval int make_huffman_tree_internal(auto const& table, NodeArrayType&& nodes)
{
    size_t allocation_count = 1;

    nodes = {};
    nodes[0].left = nodes[0].right = -1;

    for (size_t i = 0; i < table.size(); i++) {
        HuffmanEntry<Symbol> const& entry = table[i];
        int tree_pointer = 0;

        for (size_t j = 0; j < entry.code_length; j++) {
            bool const bit = (entry.code >> (entry.code_length - j - 1)) & 1;
            bool const end_of_code = j == entry.code_length - 1;

            int& target_index = bit ? nodes[tree_pointer].left : nodes[tree_pointer].right;

            if (target_index != -1) {
                if (end_of_code)
                    return -1;
                tree_pointer = target_index;
            } else {
                tree_pointer = target_index = allocation_count++;
                nodes[target_index].left = nodes[target_index].right = -1;
                nodes[target_index].code_length = j + 1;
                if (end_of_code) {
                    nodes[target_index].symbol = entry.symbol;
                    nodes[target_index].code = entry.code;
                }
            }
        }
    }

    return allocation_count;
}

template<auto table>
consteval auto make_huffman_tree()
{
    using Symbol = typename decltype(table)::ValueType::SymbolType;
    constexpr size_t size_worst_case = table.size() * 2 - 1;
    constexpr int size_fitted = make_huffman_tree_internal<Symbol>(table, HuffmanNodes<Symbol, size_worst_case>());
    static_assert(size_fitted >= 0, "Huffman tree is ill-formed");

    HuffmanNodes<Symbol, size_fitted> nodes;
    make_huffman_tree_internal<Symbol>(table, nodes);

    return nodes;
}

template<typename T>
struct HuffmanDecodeResult {
    size_t bits_read;
    Optional<HuffmanNode<T>> code;
};

template<typename T>
HuffmanDecodeResult<T> huffman_decode(BigEndianInputBitStream& bitstream, ReadonlySpan<HuffmanNode<T>> tree, size_t max_bits_to_read)
{
    HuffmanNode<T> const* node = &tree[0];
    size_t bits_read = 0;

    while (!node->is_leaf() && max_bits_to_read-- > 0) {
        auto const maybe_direction = bitstream.read_bit();
        if (maybe_direction.is_error())
            return { bits_read, {} };

        ++bits_read;
        if (maybe_direction.value()) {
            if (node->left == -1)
                return {};
            node = &tree[node->left];
        } else {
            if (node->right == -1)
                return {};
            node = &tree[node->right];
        }
    }

    if (!node->is_leaf())
        return { bits_read, {} };
    return { bits_read, *node };
}

struct HuffmanX {
    u16 symbol;
};

struct HuffmanEntryX : public HuffmanEntry<HuffmanX> {
    constexpr HuffmanEntryX(u16 sym, size_t code_length, unsigned code)
    {
        symbol.symbol = sym;
        this->code_length = code_length;
        this->code = code;
    }
};

// Appendix B. Huffman Code, https://httpwg.org/specs/rfc7541.html#huffman.code
constexpr HuffmanEntries<HuffmanEntryX, 257> Table { {
    { 0, 13, 0b11111111'11000 },
    { 1, 23, 0b11111111'11111111'1011000 },
    { 2, 28, 0b11111111'11111111'11111110'0010 },
    { 3, 28, 0b11111111'11111111'11111110'0011 },
    { 4, 28, 0b11111111'11111111'11111110'0100 },
    { 5, 28, 0b11111111'11111111'11111110'0101 },
    { 6, 28, 0b11111111'11111111'11111110'0110 },
    { 7, 28, 0b11111111'11111111'11111110'0111 },
    { 8, 28, 0b11111111'11111111'11111110'1000 },
    { 9, 24, 0b11111111'11111111'11101010 },
    { 10, 30, 0b11111111'11111111'11111111'111100 },
    { 11, 28, 0b11111111'11111111'11111110'1001 },
    { 12, 28, 0b11111111'11111111'11111110'1010 },
    { 13, 30, 0b11111111'11111111'11111111'111101 },
    { 14, 28, 0b11111111'11111111'11111110'1011 },
    { 15, 28, 0b11111111'11111111'11111110'1100 },
    { 16, 28, 0b11111111'11111111'11111110'1101 },
    { 17, 28, 0b11111111'11111111'11111110'1110 },
    { 18, 28, 0b11111111'11111111'11111110'1111 },
    { 19, 28, 0b11111111'11111111'11111111'0000 },
    { 20, 28, 0b11111111'11111111'11111111'0001 },
    { 21, 28, 0b11111111'11111111'11111111'0010 },
    { 22, 30, 0b11111111'11111111'11111111'111110 },
    { 23, 28, 0b11111111'11111111'11111111'0011 },
    { 24, 28, 0b11111111'11111111'11111111'0100 },
    { 25, 28, 0b11111111'11111111'11111111'0101 },
    { 26, 28, 0b11111111'11111111'11111111'0110 },
    { 27, 28, 0b11111111'11111111'11111111'0111 },
    { 28, 28, 0b11111111'11111111'11111111'1000 },
    { 29, 28, 0b11111111'11111111'11111111'1001 },
    { 30, 28, 0b11111111'11111111'11111111'1010 },
    { 31, 28, 0b11111111'11111111'11111111'1011 },
    { 32, 6, 0b010100 },
    { 33, 10, 0b11111110'00 },
    { 34, 10, 0b11111110'01 },
    { 35, 12, 0b11111111'1010 },
    { 36, 13, 0b11111111'11001 },
    { 37, 6, 0b010101 },
    { 38, 8, 0b11111000 },
    { 39, 11, 0b11111111'010 },
    { 40, 10, 0b11111110'10 },
    { 41, 10, 0b11111110'11 },
    { 42, 8, 0b11111001 },
    { 43, 11, 0b11111111'011 },
    { 44, 8, 0b11111010 },
    { 45, 6, 0b010110 },
    { 46, 6, 0b010111 },
    { 47, 6, 0b011000 },
    { 48, 5, 0b00000 },
    { 49, 5, 0b00001 },
    { 50, 5, 0b00010 },
    { 51, 6, 0b011001 },
    { 52, 6, 0b011010 },
    { 53, 6, 0b011011 },
    { 54, 6, 0b011100 },
    { 55, 6, 0b011101 },
    { 56, 6, 0b011110 },
    { 57, 6, 0b011111 },
    { 58, 7, 0b1011100 },
    { 59, 8, 0b11111011 },
    { 60, 15, 0b11111111'1111100 },
    { 61, 6, 0b100000 },
    { 62, 12, 0b11111111'1011 },
    { 63, 10, 0b11111111'00 },
    { 64, 13, 0b11111111'11010 },
    { 65, 6, 0b100001 },
    { 66, 7, 0b1011101 },
    { 67, 7, 0b1011110 },
    { 68, 7, 0b1011111 },
    { 69, 7, 0b1100000 },
    { 70, 7, 0b1100001 },
    { 71, 7, 0b1100010 },
    { 72, 7, 0b1100011 },
    { 73, 7, 0b1100100 },
    { 74, 7, 0b1100101 },
    { 75, 7, 0b1100110 },
    { 76, 7, 0b1100111 },
    { 77, 7, 0b1101000 },
    { 78, 7, 0b1101001 },
    { 79, 7, 0b1101010 },
    { 80, 7, 0b1101011 },
    { 81, 7, 0b1101100 },
    { 82, 7, 0b1101101 },
    { 83, 7, 0b1101110 },
    { 84, 7, 0b1101111 },
    { 85, 7, 0b1110000 },
    { 86, 7, 0b1110001 },
    { 87, 7, 0b1110010 },
    { 88, 8, 0b11111100 },
    { 89, 7, 0b1110011 },
    { 90, 8, 0b11111101 },
    { 91, 13, 0b11111111'11011 },
    { 92, 19, 0b11111111'11111110'000 },
    { 93, 13, 0b11111111'11100 },
    { 94, 14, 0b11111111'111100 },
    { 95, 6, 0b100010 },
    { 96, 15, 0b11111111'1111101 },
    { 97, 5, 0b00011 },
    { 98, 6, 0b100011 },
    { 99, 5, 0b00100 },
    { 100, 6, 0b100100 },
    { 101, 5, 0b00101 },
    { 102, 6, 0b100101 },
    { 103, 6, 0b100110 },
    { 104, 6, 0b100111 },
    { 105, 5, 0b00110 },
    { 106, 7, 0b1110100 },
    { 107, 7, 0b1110101 },
    { 108, 6, 0b101000 },
    { 109, 6, 0b101001 },
    { 110, 6, 0b101010 },
    { 111, 5, 0b00111 },
    { 112, 6, 0b101011 },
    { 113, 7, 0b1110110 },
    { 114, 6, 0b101100 },
    { 115, 5, 0b01000 },
    { 116, 5, 0b01001 },
    { 117, 6, 0b101101 },
    { 118, 7, 0b1110111 },
    { 119, 7, 0b1111000 },
    { 120, 7, 0b1111001 },
    { 121, 7, 0b1111010 },
    { 122, 7, 0b1111011 },
    { 123, 15, 0b11111111'1111110 },
    { 124, 11, 0b11111111'100 },
    { 125, 14, 0b11111111'111101 },
    { 126, 13, 0b11111111'11101 },
    { 127, 28, 0b11111111'11111111'11111111'1100 },
    { 128, 20, 0b11111111'11111110'0110 },
    { 129, 22, 0b11111111'11111111'010010 },
    { 130, 20, 0b11111111'11111110'0111 },
    { 131, 20, 0b11111111'11111110'1000 },
    { 132, 22, 0b11111111'11111111'010011 },
    { 133, 22, 0b11111111'11111111'010100 },
    { 134, 22, 0b11111111'11111111'010101 },
    { 135, 23, 0b11111111'11111111'1011001 },
    { 136, 22, 0b11111111'11111111'010110 },
    { 137, 23, 0b11111111'11111111'1011010 },
    { 138, 23, 0b11111111'11111111'1011011 },
    { 139, 23, 0b11111111'11111111'1011100 },
    { 140, 23, 0b11111111'11111111'1011101 },
    { 141, 23, 0b11111111'11111111'1011110 },
    { 142, 24, 0b11111111'11111111'11101011 },
    { 143, 23, 0b11111111'11111111'1011111 },
    { 144, 24, 0b11111111'11111111'11101100 },
    { 145, 24, 0b11111111'11111111'11101101 },
    { 146, 22, 0b11111111'11111111'010111 },
    { 147, 23, 0b11111111'11111111'1100000 },
    { 148, 24, 0b11111111'11111111'11101110 },
    { 149, 23, 0b11111111'11111111'1100001 },
    { 150, 23, 0b11111111'11111111'1100010 },
    { 151, 23, 0b11111111'11111111'1100011 },
    { 152, 23, 0b11111111'11111111'1100100 },
    { 153, 21, 0b11111111'11111110'11100 },
    { 154, 22, 0b11111111'11111111'011000 },
    { 155, 23, 0b11111111'11111111'1100101 },
    { 156, 22, 0b11111111'11111111'011001 },
    { 157, 23, 0b11111111'11111111'1100110 },
    { 158, 23, 0b11111111'11111111'1100111 },
    { 159, 24, 0b11111111'11111111'11101111 },
    { 160, 22, 0b11111111'11111111'011010 },
    { 161, 21, 0b11111111'11111110'11101 },
    { 162, 20, 0b11111111'11111110'1001 },
    { 163, 22, 0b11111111'11111111'011011 },
    { 164, 22, 0b11111111'11111111'011100 },
    { 165, 23, 0b11111111'11111111'1101000 },
    { 166, 23, 0b11111111'11111111'1101001 },
    { 167, 21, 0b11111111'11111110'11110 },
    { 168, 23, 0b11111111'11111111'1101010 },
    { 169, 22, 0b11111111'11111111'011101 },
    { 170, 22, 0b11111111'11111111'011110 },
    { 171, 24, 0b11111111'11111111'11110000 },
    { 172, 21, 0b11111111'11111110'11111 },
    { 173, 22, 0b11111111'11111111'011111 },
    { 174, 23, 0b11111111'11111111'1101011 },
    { 175, 23, 0b11111111'11111111'1101100 },
    { 176, 21, 0b11111111'11111111'00000 },
    { 177, 21, 0b11111111'11111111'00001 },
    { 178, 22, 0b11111111'11111111'100000 },
    { 179, 21, 0b11111111'11111111'00010 },
    { 180, 23, 0b11111111'11111111'1101101 },
    { 181, 22, 0b11111111'11111111'100001 },
    { 182, 23, 0b11111111'11111111'1101110 },
    { 183, 23, 0b11111111'11111111'1101111 },
    { 184, 20, 0b11111111'11111110'1010 },
    { 185, 22, 0b11111111'11111111'100010 },
    { 186, 22, 0b11111111'11111111'100011 },
    { 187, 22, 0b11111111'11111111'100100 },
    { 188, 23, 0b11111111'11111111'1110000 },
    { 189, 22, 0b11111111'11111111'100101 },
    { 190, 22, 0b11111111'11111111'100110 },
    { 191, 23, 0b11111111'11111111'1110001 },
    { 192, 26, 0b11111111'11111111'11111000'00 },
    { 193, 26, 0b11111111'11111111'11111000'01 },
    { 194, 20, 0b11111111'11111110'1011 },
    { 195, 19, 0b11111111'11111110'001 },
    { 196, 22, 0b11111111'11111111'100111 },
    { 197, 23, 0b11111111'11111111'1110010 },
    { 198, 22, 0b11111111'11111111'101000 },
    { 199, 25, 0b11111111'11111111'11110110'0 },
    { 200, 26, 0b11111111'11111111'11111000'10 },
    { 201, 26, 0b11111111'11111111'11111000'11 },
    { 202, 26, 0b11111111'11111111'11111001'00 },
    { 203, 27, 0b11111111'11111111'11111011'110 },
    { 204, 27, 0b11111111'11111111'11111011'111 },
    { 205, 26, 0b11111111'11111111'11111001'01 },
    { 206, 24, 0b11111111'11111111'11110001 },
    { 207, 25, 0b11111111'11111111'11110110'1 },
    { 208, 19, 0b11111111'11111110'010 },
    { 209, 21, 0b11111111'11111111'00011 },
    { 210, 26, 0b11111111'11111111'11111001'10 },
    { 211, 27, 0b11111111'11111111'11111100'000 },
    { 212, 27, 0b11111111'11111111'11111100'001 },
    { 213, 26, 0b11111111'11111111'11111001'11 },
    { 214, 27, 0b11111111'11111111'11111100'010 },
    { 215, 24, 0b11111111'11111111'11110010 },
    { 216, 21, 0b11111111'11111111'00100 },
    { 217, 21, 0b11111111'11111111'00101 },
    { 218, 26, 0b11111111'11111111'11111010'00 },
    { 219, 26, 0b11111111'11111111'11111010'01 },
    { 220, 28, 0b11111111'11111111'11111111'1101 },
    { 221, 27, 0b11111111'11111111'11111100'011 },
    { 222, 27, 0b11111111'11111111'11111100'100 },
    { 223, 27, 0b11111111'11111111'11111100'101 },
    { 224, 20, 0b11111111'11111110'1100 },
    { 225, 24, 0b11111111'11111111'11110011 },
    { 226, 20, 0b11111111'11111110'1101 },
    { 227, 21, 0b11111111'11111111'00110 },
    { 228, 22, 0b11111111'11111111'101001 },
    { 229, 21, 0b11111111'11111111'00111 },
    { 230, 21, 0b11111111'11111111'01000 },
    { 231, 23, 0b11111111'11111111'1110011 },
    { 232, 22, 0b11111111'11111111'101010 },
    { 233, 22, 0b11111111'11111111'101011 },
    { 234, 25, 0b11111111'11111111'11110111'0 },
    { 235, 25, 0b11111111'11111111'11110111'1 },
    { 236, 24, 0b11111111'11111111'11110100 },
    { 237, 24, 0b11111111'11111111'11110101 },
    { 238, 26, 0b11111111'11111111'11111010'10 },
    { 239, 23, 0b11111111'11111111'1110100 },
    { 240, 26, 0b11111111'11111111'11111010'11 },
    { 241, 27, 0b11111111'11111111'11111100'110 },
    { 242, 26, 0b11111111'11111111'11111011'00 },
    { 243, 26, 0b11111111'11111111'11111011'01 },
    { 244, 27, 0b11111111'11111111'11111100'111 },
    { 245, 27, 0b11111111'11111111'11111101'000 },
    { 246, 27, 0b11111111'11111111'11111101'001 },
    { 247, 27, 0b11111111'11111111'11111101'010 },
    { 248, 27, 0b11111111'11111111'11111101'011 },
    { 249, 28, 0b11111111'11111111'11111111'1110 },
    { 250, 27, 0b11111111'11111111'11111101'100 },
    { 251, 27, 0b11111111'11111111'11111101'101 },
    { 252, 27, 0b11111111'11111111'11111101'110 },
    { 253, 27, 0b11111111'11111111'11111101'111 },
    { 254, 27, 0b11111111'11111111'11111110'000 },
    { 255, 26, 0b11111111'11111111'11111011'10 },
    { 255, 30, 0b11111111'11111111'11111111'111111 },
} };

constexpr auto Tree = make_huffman_tree<Table>();

}
